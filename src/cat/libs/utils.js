function assertIsNumber(value, errorMessage = "Not a number") {
  if (typeof value !== "number") {
    throw new Error(errorMessage);
  }
}
function assertIsString(value, errorMessage = "Not a string") {
  if (typeof value !== "string") {
    throw new Error(errorMessage);
  }
}
function removeItemFromArray(array, item) {
  array.forEach((value, index) => {
    if (value === item) {
      array.splice(index, 1);
    }
  });
}
function parseNumber(input) {
  if (input === null || input === "") {
    return NaN;
  }
  return Number(input);
}
function mapToJson(map) {
  return JSON.stringify(map, (_key, value) => value instanceof Map ? [...value] : value);
}
function downloadData(data, filename = Date.now().toString()) {
  const file = new Blob([data], { type: "text/plain" });
  const element = document.createElement("a");
  const url = URL.createObjectURL(file);
  element.href = url;
  element.download = filename;
  document.body.appendChild(element);
  element.click();
  setTimeout(function() {
    document.body.removeChild(element);
    window.URL.revokeObjectURL(url);
  }, 0);
}
function scaleValueToRange(value, currentMin, currentMax, newMin, newMax) {
  return (value - currentMin) * (newMax - newMin) / (currentMax - currentMin) + newMin;
}
function sum(numbers) {
  return numbers.reduce((sum2, value) => sum2 + value, 0);
}
function mean(numbers) {
  return sum(numbers) / numbers.length;
}
function median(numbers) {
  const sorted = numbers.toSorted();
  const middle = Math.floor(sorted.length / 2);
  if (sorted.length % 2 === 0) {
    return (sorted[middle - 1] + sorted[middle]) / 2;
  }
  return sorted[middle];
}
function getRandomIntegerLessThan(range) {
  const maxRange = 4294967296;
  const randLimit = maxRange - maxRange % range;
  let sample;
  let count = 0;
  const maxIter = 100;
  do {
    sample = self.crypto.getRandomValues(new Uint32Array(1))[0];
    if (count >= maxIter) {
      throw new Error("Too many iterations. Check your source of randomness.");
    }
    count++;
  } while (sample >= randLimit);
  return sample % range;
}
function getRandomInteger(min, max) {
  if (min > max) {
    throw new Error(`Min is larger than max. Min: ${min}. Max: ${max}.`);
  }
  if (min === 0 && max === 0) {
    throw new Error(`Invalid range. Min and max must not be both 0.`);
  }
  return min + getRandomIntegerLessThan(max - min);
}
export {
  assertIsNumber,
  assertIsString,
  downloadData,
  getRandomInteger,
  getRandomIntegerLessThan,
  mapToJson,
  mean,
  median,
  parseNumber,
  removeItemFromArray,
  scaleValueToRange,
  sum
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vc3JjL2xpYnMvdXRpbHMudHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImV4cG9ydCBmdW5jdGlvbiBhc3NlcnRJc051bWJlcih2YWx1ZTogdW5rbm93biwgZXJyb3JNZXNzYWdlID0gXCJOb3QgYSBudW1iZXJcIik6IGFzc2VydHMgdmFsdWUgaXMgbnVtYmVyIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlICE9PSBcIm51bWJlclwiKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvck1lc3NhZ2UpO1xuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFzc2VydElzU3RyaW5nKHZhbHVlOiB1bmtub3duLCBlcnJvck1lc3NhZ2UgPSBcIk5vdCBhIHN0cmluZ1wiKTogYXNzZXJ0cyB2YWx1ZSBpcyBzdHJpbmcge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yTWVzc2FnZSk7XG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlSXRlbUZyb21BcnJheTxUPihhcnJheTogVFtdLCBpdGVtOiBUKSB7XG4gICAgYXJyYXkuZm9yRWFjaCgodmFsdWUsIGluZGV4KSA9PiB7XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gaXRlbSkge1xuICAgICAgICAgICAgYXJyYXkuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuXG4vKipcbiAqIFJldHVybiBOYU4gaWYgaW5wdXQgaXM6XG4gKiAtIHVuZGVmaW5lZFxuICogLSBudWxsXG4gKiAtIGVtcHR5IHN0cmluZyAoXCJcIilcbiAqIEBwYXJhbSBpbnB1dFxuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VOdW1iZXIoaW5wdXQ6IG51bWJlciB8IHN0cmluZyB8IG51bGwgfCB1bmRlZmluZWQpIHtcbiAgICAvLyBOdW1iZXIodW5kZWZpbmVkKSBpcyBOYU4sIHNvIHdlIGRvbid0IGhhdmUgdG8gaGFuZGxlIHRoYXQgY2FzZVxuICAgIGlmIChpbnB1dCA9PT0gbnVsbCB8fCBpbnB1dCA9PT0gXCJcIikge1xuICAgICAgICByZXR1cm4gTmFOO1xuICAgIH1cbiAgICByZXR1cm4gTnVtYmVyKGlucHV0KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1hcFRvSnNvbihtYXA6IE1hcDx1bmtub3duLCB1bmtub3duPik6IHN0cmluZyB7XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KG1hcCwgKF9rZXksIHZhbHVlKSA9PiAodmFsdWUgaW5zdGFuY2VvZiBNYXAgPyBbLi4udmFsdWVdIDogdmFsdWUpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRvd25sb2FkRGF0YShkYXRhOiBzdHJpbmcsIGZpbGVuYW1lOiBzdHJpbmcgPSBEYXRlLm5vdygpLnRvU3RyaW5nKCkpIHtcbiAgICBjb25zdCBmaWxlID0gbmV3IEJsb2IoW2RhdGFdLCB7dHlwZTogXCJ0ZXh0L3BsYWluXCJ9KTtcbiAgICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImFcIik7XG4gICAgY29uc3QgdXJsID0gVVJMLmNyZWF0ZU9iamVjdFVSTChmaWxlKTtcbiAgICBlbGVtZW50LmhyZWYgPSB1cmw7XG4gICAgZWxlbWVudC5kb3dubG9hZCA9IGZpbGVuYW1lO1xuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZWxlbWVudCk7XG4gICAgZWxlbWVudC5jbGljaygpO1xuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKGVsZW1lbnQpO1xuICAgICAgICB3aW5kb3cuVVJMLnJldm9rZU9iamVjdFVSTCh1cmwpO1xuICAgIH0sIDApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2NhbGVWYWx1ZVRvUmFuZ2UodmFsdWU6IG51bWJlciwgY3VycmVudE1pbjogbnVtYmVyLCBjdXJyZW50TWF4OiBudW1iZXIsIG5ld01pbjogbnVtYmVyLCBuZXdNYXg6IG51bWJlcik6IG51bWJlciB7XG4gICAgcmV0dXJuICgodmFsdWUgLSBjdXJyZW50TWluKSAqIChuZXdNYXggLSBuZXdNaW4pIC8gKGN1cnJlbnRNYXggLSBjdXJyZW50TWluKSkgKyBuZXdNaW47XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzdW0obnVtYmVyczogbnVtYmVyW10pOiBudW1iZXIge1xuICAgIHJldHVybiBudW1iZXJzLnJlZHVjZSgoc3VtLCB2YWx1ZSkgPT4gc3VtICsgdmFsdWUsIDApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbWVhbihudW1iZXJzOiBudW1iZXJbXSkge1xuICAgIHJldHVybiBzdW0obnVtYmVycykgLyBudW1iZXJzLmxlbmd0aDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1lZGlhbihudW1iZXJzOiBudW1iZXJbXSkge1xuICAgIGNvbnN0IHNvcnRlZCA9IG51bWJlcnMudG9Tb3J0ZWQoKTtcbiAgICBjb25zdCBtaWRkbGUgPSBNYXRoLmZsb29yKHNvcnRlZC5sZW5ndGggLyAyKTtcbiAgICBpZiAoc29ydGVkLmxlbmd0aCAlIDIgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIChzb3J0ZWRbbWlkZGxlIC0gMV0gKyBzb3J0ZWRbbWlkZGxlXSkgLyAyO1xuICAgIH1cbiAgICByZXR1cm4gc29ydGVkW21pZGRsZV07XG59XG5cbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gUmFuZG9tIGZ1bmN0aW9ucyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gUmVmIDE6IGh0dHBzOi8vZGltaXRyaS54eXovcmFuZG9tLWludHMtZnJvbS1yYW5kb20tYml0cy9cbi8vIFJlZiAyOiBodHRwczovL2dpdGh1Yi5jb20vbm9kZWpzL25vZGUvYmxvYi9tYWluL2xpYi9pbnRlcm5hbC9jcnlwdG8vcmFuZG9tLmpzXG5cbi8qKlxuICogQHBhcmFtIHtOdW1iZXJ9IHJhbmdlXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBSZXR1cm5lZCB2YWx1ZSBpcyBpbiBpbnRlcnZhbCBbMCwgcmFuZ2UpXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRSYW5kb21JbnRlZ2VyTGVzc1RoYW4ocmFuZ2U6IG51bWJlcik6IG51bWJlciB7XG4gICAgLy8gMzIgYml0IG1heGltdW1cbiAgICBjb25zdCBtYXhSYW5nZSA9IDQyOTQ5NjcyOTY7ICAvLyAyXjMyXG4gICAgLyogZXh0ZW5kZWQgcmFuZ2UgcmVqZWN0aW9uIHNhbXBsaW5nICovXG4gICAgY29uc3QgcmFuZExpbWl0ID0gbWF4UmFuZ2UgLSAobWF4UmFuZ2UgJSByYW5nZSk7XG4gICAgbGV0IHNhbXBsZTtcbiAgICBsZXQgY291bnQgPSAwO1xuICAgIGNvbnN0IG1heEl0ZXIgPSAxMDA7XG4gICAgZG8ge1xuICAgICAgICBzYW1wbGUgPSBzZWxmLmNyeXB0by5nZXRSYW5kb21WYWx1ZXMobmV3IFVpbnQzMkFycmF5KDEpKVswXTtcbiAgICAgICAgaWYgKGNvdW50ID49IG1heEl0ZXIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlRvbyBtYW55IGl0ZXJhdGlvbnMuIENoZWNrIHlvdXIgc291cmNlIG9mIHJhbmRvbW5lc3MuXCIpO1xuICAgICAgICB9XG4gICAgICAgIGNvdW50Kys7XG4gICAgfSB3aGlsZSAoc2FtcGxlID49IHJhbmRMaW1pdCk7XG4gICAgcmV0dXJuIHNhbXBsZSAlIHJhbmdlO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7TnVtYmVyfSBtaW5cbiAqIEBwYXJhbSB7TnVtYmVyfSBtYXhcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IFJldHVybmVkIHZhbHVlIGlzIGluIGludGVydmFsIFtsb3csIGhpZ2gpXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRSYW5kb21JbnRlZ2VyKG1pbjogbnVtYmVyLCBtYXg6IG51bWJlcik6IG51bWJlciB7XG4gICAgaWYgKG1pbiA+IG1heCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYE1pbiBpcyBsYXJnZXIgdGhhbiBtYXguIE1pbjogJHttaW59LiBNYXg6ICR7bWF4fS5gKTtcbiAgICB9XG4gICAgaWYgKG1pbiA9PT0gMCAmJiBtYXggPT09IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIHJhbmdlLiBNaW4gYW5kIG1heCBtdXN0IG5vdCBiZSBib3RoIDAuYCk7XG4gICAgfVxuICAgIHJldHVybiAobWluICsgZ2V0UmFuZG9tSW50ZWdlckxlc3NUaGFuKG1heCAtIG1pbikpO1xufVxuXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFJhbmRvbSBmdW5jdGlvbnMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiJdLAogICJtYXBwaW5ncyI6ICJBQUFPLFNBQVMsZUFBZSxPQUFnQixlQUFlLGdCQUF5QztBQUNuRyxNQUFJLE9BQU8sVUFBVSxVQUFVO0FBQzNCLFVBQU0sSUFBSSxNQUFNLFlBQVk7QUFBQSxFQUNoQztBQUNKO0FBRU8sU0FBUyxlQUFlLE9BQWdCLGVBQWUsZ0JBQXlDO0FBQ25HLE1BQUksT0FBTyxVQUFVLFVBQVU7QUFDM0IsVUFBTSxJQUFJLE1BQU0sWUFBWTtBQUFBLEVBQ2hDO0FBQ0o7QUFFTyxTQUFTLG9CQUF1QixPQUFZLE1BQVM7QUFDeEQsUUFBTSxRQUFRLENBQUMsT0FBTyxVQUFVO0FBQzVCLFFBQUksVUFBVSxNQUFNO0FBQ2hCLFlBQU0sT0FBTyxPQUFPLENBQUM7QUFBQSxJQUN6QjtBQUFBLEVBQ0osQ0FBQztBQUNMO0FBU08sU0FBUyxZQUFZLE9BQTJDO0FBRW5FLE1BQUksVUFBVSxRQUFRLFVBQVUsSUFBSTtBQUNoQyxXQUFPO0FBQUEsRUFDWDtBQUNBLFNBQU8sT0FBTyxLQUFLO0FBQ3ZCO0FBRU8sU0FBUyxVQUFVLEtBQW9DO0FBQzFELFNBQU8sS0FBSyxVQUFVLEtBQUssQ0FBQyxNQUFNLFVBQVcsaUJBQWlCLE1BQU0sQ0FBQyxHQUFHLEtBQUssSUFBSSxLQUFNO0FBQzNGO0FBRU8sU0FBUyxhQUFhLE1BQWMsV0FBbUIsS0FBSyxJQUFJLEVBQUUsU0FBUyxHQUFHO0FBQ2pGLFFBQU0sT0FBTyxJQUFJLEtBQUssQ0FBQyxJQUFJLEdBQUcsRUFBQyxNQUFNLGFBQVksQ0FBQztBQUNsRCxRQUFNLFVBQVUsU0FBUyxjQUFjLEdBQUc7QUFDMUMsUUFBTSxNQUFNLElBQUksZ0JBQWdCLElBQUk7QUFDcEMsVUFBUSxPQUFPO0FBQ2YsVUFBUSxXQUFXO0FBQ25CLFdBQVMsS0FBSyxZQUFZLE9BQU87QUFDakMsVUFBUSxNQUFNO0FBQ2QsYUFBVyxXQUFZO0FBQ25CLGFBQVMsS0FBSyxZQUFZLE9BQU87QUFDakMsV0FBTyxJQUFJLGdCQUFnQixHQUFHO0FBQUEsRUFDbEMsR0FBRyxDQUFDO0FBQ1I7QUFFTyxTQUFTLGtCQUFrQixPQUFlLFlBQW9CLFlBQW9CLFFBQWdCLFFBQXdCO0FBQzdILFVBQVMsUUFBUSxlQUFlLFNBQVMsV0FBVyxhQUFhLGNBQWU7QUFDcEY7QUFFTyxTQUFTLElBQUksU0FBMkI7QUFDM0MsU0FBTyxRQUFRLE9BQU8sQ0FBQ0EsTUFBSyxVQUFVQSxPQUFNLE9BQU8sQ0FBQztBQUN4RDtBQUVPLFNBQVMsS0FBSyxTQUFtQjtBQUNwQyxTQUFPLElBQUksT0FBTyxJQUFJLFFBQVE7QUFDbEM7QUFFTyxTQUFTLE9BQU8sU0FBbUI7QUFDdEMsUUFBTSxTQUFTLFFBQVEsU0FBUztBQUNoQyxRQUFNLFNBQVMsS0FBSyxNQUFNLE9BQU8sU0FBUyxDQUFDO0FBQzNDLE1BQUksT0FBTyxTQUFTLE1BQU0sR0FBRztBQUN6QixZQUFRLE9BQU8sU0FBUyxDQUFDLElBQUksT0FBTyxNQUFNLEtBQUs7QUFBQSxFQUNuRDtBQUNBLFNBQU8sT0FBTyxNQUFNO0FBQ3hCO0FBVU8sU0FBUyx5QkFBeUIsT0FBdUI7QUFFNUQsUUFBTSxXQUFXO0FBRWpCLFFBQU0sWUFBWSxXQUFZLFdBQVc7QUFDekMsTUFBSTtBQUNKLE1BQUksUUFBUTtBQUNaLFFBQU0sVUFBVTtBQUNoQixLQUFHO0FBQ0MsYUFBUyxLQUFLLE9BQU8sZ0JBQWdCLElBQUksWUFBWSxDQUFDLENBQUMsRUFBRSxDQUFDO0FBQzFELFFBQUksU0FBUyxTQUFTO0FBQ2xCLFlBQU0sSUFBSSxNQUFNLHVEQUF1RDtBQUFBLElBQzNFO0FBQ0E7QUFBQSxFQUNKLFNBQVMsVUFBVTtBQUNuQixTQUFPLFNBQVM7QUFDcEI7QUFPTyxTQUFTLGlCQUFpQixLQUFhLEtBQXFCO0FBQy9ELE1BQUksTUFBTSxLQUFLO0FBQ1gsVUFBTSxJQUFJLE1BQU0sZ0NBQWdDLEdBQUcsVUFBVSxHQUFHLEdBQUc7QUFBQSxFQUN2RTtBQUNBLE1BQUksUUFBUSxLQUFLLFFBQVEsR0FBRztBQUN4QixVQUFNLElBQUksTUFBTSxnREFBZ0Q7QUFBQSxFQUNwRTtBQUNBLFNBQVEsTUFBTSx5QkFBeUIsTUFBTSxHQUFHO0FBQ3BEOyIsCiAgIm5hbWVzIjogWyJzdW0iXQp9Cg==
