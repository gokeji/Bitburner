import {
  directoryRegexString,
  isAbsolutePath,
  oneValidCharacter,
  resolveValidatedDirectory
} from "/libs/paths/Directory";
const filenameRegexString = `(?<file>${oneValidCharacter}+\\.${oneValidCharacter}+)$`;
const basicFilePathRegex = new RegExp(directoryRegexString + filenameRegexString);
function isFilePath(path) {
  return basicFilePathRegex.test(path);
}
function asFilePath(input) {
  if (isFilePath(input) && isAbsolutePath(input)) return input;
  throw new Error(`${input} failed to validate as a FilePath.`);
}
function getFilenameOnly(path) {
  const start = path.lastIndexOf("/") + 1;
  return path.substring(start);
}
function getFileParts(path) {
  const result = basicFilePathRegex.exec(path);
  return result ? result.groups : null;
}
function resolveFilePath(path, base = "") {
  if (isAbsolutePath(path)) {
    if (path.startsWith("/")) path = path.substring(1);
    return isFilePath(path) ? path : null;
  }
  base = getBaseDirectory(base);
  const pathParts = getFileParts(path);
  if (!pathParts) return null;
  const directory = resolveValidatedDirectory(pathParts.directory, base);
  return directory === null ? null : combinePath(directory, pathParts.file);
}
function getBaseDirectory(path) {
  return path.replace(/[^/]+\.[^/]+$/, "");
}
function combinePath(directory, file) {
  return directory + file;
}
function removeDirectoryFromPath(directory, path) {
  if (!path.startsWith(directory)) return null;
  return path.substring(directory.length);
}
export {
  asFilePath,
  combinePath,
  getFilenameOnly,
  isFilePath,
  removeDirectoryFromPath,
  resolveFilePath
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vLi4vc3JjL2xpYnMvcGF0aHMvRmlsZVBhdGgudHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImltcG9ydCB7XG4gICAgQWJzb2x1dGVQYXRoLFxuICAgIEJhc2ljRGlyZWN0b3J5LFxuICAgIERpcmVjdG9yeSxcbiAgICBkaXJlY3RvcnlSZWdleFN0cmluZyxcbiAgICBpc0Fic29sdXRlUGF0aCxcbiAgICBvbmVWYWxpZENoYXJhY3RlcixcbiAgICByZXNvbHZlVmFsaWRhdGVkRGlyZWN0b3J5LFxufSBmcm9tIFwiL2xpYnMvcGF0aHMvRGlyZWN0b3J5XCI7XG5cbi8qKiBGaWxlcGF0aCBSdWxlczpcbiAqIDEuIEZpbGUgZXh0ZW5zaW9uIGNhbm5vdCBjb250YWluIGEgXCIvXCJcbiAqIDIuIExhc3QgY2hhcmFjdGVyIGJlZm9yZSB0aGUgZXh0ZW5zaW9uIGNhbm5vdCBiZSBhIFwiL1wiIGFzIHRoaXMgd291bGQgYmUgYSBibGFuayBmaWxlbmFtZVxuICogMy4gTXVzdCBub3QgY29udGFpbiBhIGxlYWRpbmcgXCIvXCJcbiAqIDQuIERpcmVjdG9yeSBuYW1lcyBjYW5ub3QgYmUgMC1sZW5ndGggKG5vIFwiLy9cIilcbiAqIDUuIFRoZSBjaGFyYWN0ZXJzICosID8sIFssIGFuZCBdICBjYW5ub3QgZXhpc3QgaW4gdGhlIGZpbGVwYXRoKi9cbnR5cGUgQmFzaWNGaWxlUGF0aCA9IHN0cmluZyAmIHsgX190eXBlOiBcIkZpbGVQYXRoXCI7IH07XG5cbi8qKiBBIGZpbGUgcGF0aCB0aGF0IGlzIGFsc28gYW4gYWJzb2x1dGUgcGF0aC4gQWRkaXRpb25hbCBhYnNvbHV0ZSBydWxlczpcbiAqIDEuIFNwZWNpZmljIGRpcmVjdG9yeSBuYW1lcyBcIi5cIiBhbmQgXCIuLlwiIGFyZSBkaXNhbGxvd2VkXG4gKiBBYnNvbHV0ZW5lc3MgaXMgdHlwZWNoZWNrZWQgd2l0aCBpc0Fic29sdXRlUGF0aCBpbiBEaXJlY3RvcnlQYXRoLnRzICovXG5leHBvcnQgdHlwZSBGaWxlUGF0aCA9IEJhc2ljRmlsZVBhdGggJiBBYnNvbHV0ZVBhdGg7XG5cbi8vIENhcHR1cmluZyBncm91cCBuYW1lZCBmaWxlIHdoaWNoIGNhcHR1cmVzIHRoZSBlbnRpcmUgZmlsZW5hbWUgcGFydCBvZiBhIGZpbGUgcGF0aC5cbmNvbnN0IGZpbGVuYW1lUmVnZXhTdHJpbmcgPSBgKD88ZmlsZT4ke29uZVZhbGlkQ2hhcmFjdGVyfStcXFxcLiR7b25lVmFsaWRDaGFyYWN0ZXJ9KykkYDtcblxuLyoqIFJlZ2V4IG1hZGUgb2YgdGhlIHR3byBhYm92ZSByZWdleCBwYXJ0cyB0byB0ZXN0IGZvciBhIHdob2xlIHZhbGlkIGZpbGVwYXRoLiAqL1xuY29uc3QgYmFzaWNGaWxlUGF0aFJlZ2V4ID0gbmV3IFJlZ0V4cChkaXJlY3RvcnlSZWdleFN0cmluZyArIGZpbGVuYW1lUmVnZXhTdHJpbmcpIGFzIFJlZ0V4cCAmIHtcbiAgICBleGVjOiAocGF0aDogc3RyaW5nKSA9PiBudWxsIHwgeyBncm91cHM6IHsgZGlyZWN0b3J5OiBCYXNpY0RpcmVjdG9yeTsgZmlsZTogRmlsZVBhdGg7IH07IH07XG59O1xuXG4vKiogU2ltcGxlIHZhbGlkYXRpb24gZnVuY3Rpb24gd2l0aCBubyBtb2RpZmljYXRpb24uIENhbiBiZSBjb21iaW5lZCB3aXRoIGlzQWJzb2x1dGVQYXRoIHRvIGdldCBhIHJlYWwgRmlsZVBhdGggKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0ZpbGVQYXRoKHBhdGg6IHN0cmluZyk6IHBhdGggaXMgQmFzaWNGaWxlUGF0aCB7XG4gICAgcmV0dXJuIGJhc2ljRmlsZVBhdGhSZWdleC50ZXN0KHBhdGgpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXNGaWxlUGF0aDxUIGV4dGVuZHMgc3RyaW5nPihpbnB1dDogVCk6IFQgJiBGaWxlUGF0aCB7XG4gICAgaWYgKGlzRmlsZVBhdGgoaW5wdXQpICYmIGlzQWJzb2x1dGVQYXRoKGlucHV0KSkgcmV0dXJuIGlucHV0O1xuICAgIHRocm93IG5ldyBFcnJvcihgJHtpbnB1dH0gZmFpbGVkIHRvIHZhbGlkYXRlIGFzIGEgRmlsZVBhdGguYCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRGaWxlbmFtZU9ubHk8VCBleHRlbmRzIEJhc2ljRmlsZVBhdGg+KHBhdGg6IFQpOiBUICYgRmlsZVBhdGgge1xuICAgIGNvbnN0IHN0YXJ0ID0gcGF0aC5sYXN0SW5kZXhPZihcIi9cIikgKyAxO1xuICAgIHJldHVybiBwYXRoLnN1YnN0cmluZyhzdGFydCkgYXMgVCAmIEZpbGVQYXRoO1xufVxuXG4vKiogVmFsaWRhdGUgd2hpbGUgYWxzbyBjYXB0dXJpbmcgYW5kIHJldHVybmluZyBkaXJlY3RvcnkgYW5kIGZpbGUgcGFydHMgKi9cbmZ1bmN0aW9uIGdldEZpbGVQYXJ0cyhwYXRoOiBzdHJpbmcpOiB7IGRpcmVjdG9yeTogQmFzaWNEaXJlY3Rvcnk7IGZpbGU6IEZpbGVQYXRoOyB9IHwgbnVsbCB7XG4gICAgY29uc3QgcmVzdWx0ID0gYmFzaWNGaWxlUGF0aFJlZ2V4LmV4ZWMocGF0aCkgYXMgbnVsbCB8IHsgZ3JvdXBzOiB7IGRpcmVjdG9yeTogQmFzaWNEaXJlY3Rvcnk7IGZpbGU6IEZpbGVQYXRoOyB9OyB9O1xuICAgIHJldHVybiByZXN1bHQgPyByZXN1bHQuZ3JvdXBzIDogbnVsbDtcbn1cblxuLyoqIFNhbml0aXplcyBhIHBsYXllciBpbnB1dCBhbmQgcmVzb2x2ZXMgYSByZWxhdGl2ZSBmaWxlIHBhdGggdG8gYW4gYWJzb2x1dGUgb25lLlxuICogQHBhcmFtIHBhdGggVGhlIHBsYXllci1wcm92aWRlZCBwYXRoIHN0cmluZy4gQ2FuIGluY2x1ZGUgcmVsYXRpdmUgZGlyZWN0b3JpZXMuXG4gKiBAcGFyYW0gYmFzZSBUaGUgYWJzb2x1dGUgYmFzZSBmb3IgcmVzb2x2aW5nIGEgcmVsYXRpdmUgcGF0aC4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZXNvbHZlRmlsZVBhdGgocGF0aDogc3RyaW5nLCBiYXNlID0gXCJcIiBhcyBGaWxlUGF0aCB8IERpcmVjdG9yeSk6IEZpbGVQYXRoIHwgbnVsbCB7XG4gICAgaWYgKGlzQWJzb2x1dGVQYXRoKHBhdGgpKSB7XG4gICAgICAgIGlmIChwYXRoLnN0YXJ0c1dpdGgoXCIvXCIpKSBwYXRoID0gcGF0aC5zdWJzdHJpbmcoMSk7XG4gICAgICAgIC8vIEJlY2F1c2Ugd2UgbW9kaWZpZWQgdGhlIHN0cmluZyBzaW5jZSBjaGVja2luZyBhYnNvbHV0ZW5lc3MsIHdlIGhhdmUgdG8gYXNzZXJ0IHRoYXQgaXQncyBzdGlsbCBhYnNvbHV0ZSBoZXJlLlxuICAgICAgICByZXR1cm4gaXNGaWxlUGF0aChwYXRoKSA/IChwYXRoIGFzIEZpbGVQYXRoKSA6IG51bGw7XG4gICAgfVxuICAgIC8vIFR1cm4gYmFzZSBpbnRvIGEgRGlyZWN0b3J5TmFtZSBpbiBjYXNlIGl0IHdhcyBub3RcbiAgICBiYXNlID0gZ2V0QmFzZURpcmVjdG9yeShiYXNlKTtcbiAgICBjb25zdCBwYXRoUGFydHMgPSBnZXRGaWxlUGFydHMocGF0aCk7XG4gICAgaWYgKCFwYXRoUGFydHMpIHJldHVybiBudWxsO1xuICAgIGNvbnN0IGRpcmVjdG9yeSA9IHJlc29sdmVWYWxpZGF0ZWREaXJlY3RvcnkocGF0aFBhcnRzLmRpcmVjdG9yeSwgYmFzZSk7XG4gICAgLy8gSGF2ZSB0byBzcGVjaWZpY2FsbHkgY2hlY2sgbnVsbCBoZXJlIGluc3RlYWQgb2YgdHJ1dGhpbmVzcywgYmVjYXVzZSBlbXB0eSBzdHJpbmcgaXMgYSB2YWxpZCBEaXJlY3RvcnlQYXRoXG4gICAgcmV0dXJuIGRpcmVjdG9yeSA9PT0gbnVsbCA/IG51bGwgOiBjb21iaW5lUGF0aChkaXJlY3RvcnksIHBhdGhQYXJ0cy5maWxlKTtcbn1cblxuLyoqIFJlbW92ZSB0aGUgZmlsZSBwYXJ0IGZyb20gYW4gYWJzb2x1dGUgcGF0aCAoRmlsZVBhdGggb3IgRGlyZWN0b3J5UGF0aCAtIG5vIG1vZGlmaWNhdGlvbiBpcyBkb25lIGZvciBhIERpcmVjdG9yeVBhdGgpICovXG5mdW5jdGlvbiBnZXRCYXNlRGlyZWN0b3J5KHBhdGg6IEZpbGVQYXRoIHwgRGlyZWN0b3J5KTogRGlyZWN0b3J5IHtcbiAgICByZXR1cm4gcGF0aC5yZXBsYWNlKC9bXi9dK1xcLlteL10rJC8sIFwiXCIpIGFzIERpcmVjdG9yeTtcbn1cblxuLyoqIENvbWJpbmUgYW4gYWJzb2x1dGUgRGlyZWN0b3J5UGF0aCBhbmQgRmlsZVBhdGggdG8gY3JlYXRlIGEgbmV3IEZpbGVQYXRoICovXG5leHBvcnQgZnVuY3Rpb24gY29tYmluZVBhdGg8VCBleHRlbmRzIEZpbGVQYXRoPihkaXJlY3Rvcnk6IERpcmVjdG9yeSwgZmlsZTogVCk6IFQge1xuICAgIC8vIFByZXNlcnZlcyB0aGUgc3BlY2lmaWMgZmlsZSB0eXBlIGJlY2F1c2UgdGhlIGZpbGVwYXJ0IGlzIHByZXNlcnZlZC5cbiAgICByZXR1cm4gKGRpcmVjdG9yeSArIGZpbGUpIGFzIFQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVEaXJlY3RvcnlGcm9tUGF0aChkaXJlY3Rvcnk6IERpcmVjdG9yeSwgcGF0aDogRmlsZVBhdGgpOiBGaWxlUGF0aCB8IG51bGwge1xuICAgIGlmICghcGF0aC5zdGFydHNXaXRoKGRpcmVjdG9yeSkpIHJldHVybiBudWxsO1xuICAgIHJldHVybiBwYXRoLnN1YnN0cmluZyhkaXJlY3RvcnkubGVuZ3RoKSBhcyBGaWxlUGF0aDtcbn1cbiJdLAogICJtYXBwaW5ncyI6ICJBQUFBO0FBQUEsRUFJSTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLE9BQ0c7QUFnQlAsTUFBTSxzQkFBc0IsV0FBVyxpQkFBaUIsT0FBTyxpQkFBaUI7QUFHaEYsTUFBTSxxQkFBcUIsSUFBSSxPQUFPLHVCQUF1QixtQkFBbUI7QUFLekUsU0FBUyxXQUFXLE1BQXFDO0FBQzVELFNBQU8sbUJBQW1CLEtBQUssSUFBSTtBQUN2QztBQUVPLFNBQVMsV0FBNkIsT0FBd0I7QUFDakUsTUFBSSxXQUFXLEtBQUssS0FBSyxlQUFlLEtBQUssRUFBRyxRQUFPO0FBQ3ZELFFBQU0sSUFBSSxNQUFNLEdBQUcsS0FBSyxvQ0FBb0M7QUFDaEU7QUFFTyxTQUFTLGdCQUF5QyxNQUF1QjtBQUM1RSxRQUFNLFFBQVEsS0FBSyxZQUFZLEdBQUcsSUFBSTtBQUN0QyxTQUFPLEtBQUssVUFBVSxLQUFLO0FBQy9CO0FBR0EsU0FBUyxhQUFhLE1BQXFFO0FBQ3ZGLFFBQU0sU0FBUyxtQkFBbUIsS0FBSyxJQUFJO0FBQzNDLFNBQU8sU0FBUyxPQUFPLFNBQVM7QUFDcEM7QUFLTyxTQUFTLGdCQUFnQixNQUFjLE9BQU8sSUFBNkM7QUFDOUYsTUFBSSxlQUFlLElBQUksR0FBRztBQUN0QixRQUFJLEtBQUssV0FBVyxHQUFHLEVBQUcsUUFBTyxLQUFLLFVBQVUsQ0FBQztBQUVqRCxXQUFPLFdBQVcsSUFBSSxJQUFLLE9BQW9CO0FBQUEsRUFDbkQ7QUFFQSxTQUFPLGlCQUFpQixJQUFJO0FBQzVCLFFBQU0sWUFBWSxhQUFhLElBQUk7QUFDbkMsTUFBSSxDQUFDLFVBQVcsUUFBTztBQUN2QixRQUFNLFlBQVksMEJBQTBCLFVBQVUsV0FBVyxJQUFJO0FBRXJFLFNBQU8sY0FBYyxPQUFPLE9BQU8sWUFBWSxXQUFXLFVBQVUsSUFBSTtBQUM1RTtBQUdBLFNBQVMsaUJBQWlCLE1BQXVDO0FBQzdELFNBQU8sS0FBSyxRQUFRLGlCQUFpQixFQUFFO0FBQzNDO0FBR08sU0FBUyxZQUFnQyxXQUFzQixNQUFZO0FBRTlFLFNBQVEsWUFBWTtBQUN4QjtBQUVPLFNBQVMsd0JBQXdCLFdBQXNCLE1BQWlDO0FBQzNGLE1BQUksQ0FBQyxLQUFLLFdBQVcsU0FBUyxFQUFHLFFBQU87QUFDeEMsU0FBTyxLQUFLLFVBQVUsVUFBVSxNQUFNO0FBQzFDOyIsCiAgIm5hbWVzIjogW10KfQo=
