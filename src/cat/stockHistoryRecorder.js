import { MAX_STOCK_HISTORY_RECORD, STOCK_HISTORY_LOGS_PREFIX } from "/libs/constants";
import { NetscriptExtension } from "/libs/NetscriptExtension";
let nsx;
async function main(ns) {
  nsx = new NetscriptExtension(ns);
  nsx.killProcessesSpawnFromSameScript();
  ns.disableLog("ALL");
  ns.tail();
  const stockSymbols = ns.stock.getSymbols();
  const stockTraderData = {
    stockPrices: {},
    stockForecasts: {}
  };
  let rotateLog = true;
  let logFilename = "";
  while (true) {
    if (ns.ls("home", STOCK_HISTORY_LOGS_PREFIX).length >= 10) {
      break;
    }
    if (rotateLog) {
      stockSymbols.forEach((symbol) => {
        stockTraderData.stockPrices[symbol] = [ns.stock.getPrice(symbol)];
        stockTraderData.stockForecasts[symbol] = [ns.stock.getForecast(symbol)];
      });
      logFilename = `${STOCK_HISTORY_LOGS_PREFIX}${Date.now()}.txt`;
      rotateLog = false;
    }
    const isPriceChanged = stockSymbols.some((symbol) => {
      const records = stockTraderData.stockPrices[symbol];
      return records[records.length - 1] !== ns.stock.getPrice(symbol);
    });
    if (!isPriceChanged) {
      await ns.sleep(2e3);
      continue;
    }
    stockSymbols.forEach((symbol) => {
      const records = stockTraderData.stockPrices[symbol];
      records.push(ns.stock.getPrice(symbol));
      stockTraderData.stockForecasts[symbol].push(ns.stock.getForecast(symbol));
      if (records.length === MAX_STOCK_HISTORY_RECORD) {
        rotateLog = true;
      }
    });
    ns.write(logFilename, JSON.stringify(stockTraderData), "w");
    await ns.sleep(2e3);
  }
}
export {
  main
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vc3JjL3N0b2NrSGlzdG9yeVJlY29yZGVyLnRzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJpbXBvcnQge05TfSBmcm9tIFwiQG5zXCI7XG5pbXBvcnQge01BWF9TVE9DS19ISVNUT1JZX1JFQ09SRCwgU1RPQ0tfSElTVE9SWV9MT0dTX1BSRUZJWH0gZnJvbSBcIi9saWJzL2NvbnN0YW50c1wiO1xuaW1wb3J0IHtOZXRzY3JpcHRFeHRlbnNpb259IGZyb20gXCIvbGlicy9OZXRzY3JpcHRFeHRlbnNpb25cIjtcblxuLyoqXG4gKiBVc2UgUmVjb3JkIGluc3RlYWQgb2YgTWFwLCBzbyB3ZSBjYW4gdXNlIEpTT04uc3RyaW5naWZ5IGVhc2llclxuICovXG5leHBvcnQgaW50ZXJmYWNlIFN0b2NrVHJhZGVyRGF0YSB7XG4gICAgc3RvY2tQcmljZXM6IFJlY29yZDxzdHJpbmcsIG51bWJlcltdPjtcbiAgICBzdG9ja0ZvcmVjYXN0czogUmVjb3JkPHN0cmluZywgbnVtYmVyW10+O1xufVxuXG5sZXQgbnN4OiBOZXRzY3JpcHRFeHRlbnNpb247XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUyk6IFByb21pc2U8dm9pZD4ge1xuICAgIG5zeCA9IG5ldyBOZXRzY3JpcHRFeHRlbnNpb24obnMpO1xuICAgIG5zeC5raWxsUHJvY2Vzc2VzU3Bhd25Gcm9tU2FtZVNjcmlwdCgpO1xuXG4gICAgbnMuZGlzYWJsZUxvZyhcIkFMTFwiKTtcbiAgICBucy50YWlsKCk7XG5cbiAgICBjb25zdCBzdG9ja1N5bWJvbHMgPSBucy5zdG9jay5nZXRTeW1ib2xzKCk7XG4gICAgY29uc3Qgc3RvY2tUcmFkZXJEYXRhOiBTdG9ja1RyYWRlckRhdGEgPSB7XG4gICAgICAgIHN0b2NrUHJpY2VzOiB7fSxcbiAgICAgICAgc3RvY2tGb3JlY2FzdHM6IHt9XG4gICAgfTtcbiAgICBsZXQgcm90YXRlTG9nID0gdHJ1ZTtcbiAgICBsZXQgbG9nRmlsZW5hbWUgPSBcIlwiO1xuICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIC8vIE9ubHkgc3RvcmUgMTAgbG9nIGZpbGVzXG4gICAgICAgIGlmIChucy5scyhcImhvbWVcIiwgU1RPQ0tfSElTVE9SWV9MT0dTX1BSRUZJWCkubGVuZ3RoID49IDEwKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICAvLyBSb3RhdGUgbG9nXG4gICAgICAgIGlmIChyb3RhdGVMb2cpIHtcbiAgICAgICAgICAgIC8vIEluaXRcbiAgICAgICAgICAgIHN0b2NrU3ltYm9scy5mb3JFYWNoKHN5bWJvbCA9PiB7XG4gICAgICAgICAgICAgICAgc3RvY2tUcmFkZXJEYXRhLnN0b2NrUHJpY2VzW3N5bWJvbF0gPSBbbnMuc3RvY2suZ2V0UHJpY2Uoc3ltYm9sKV07XG4gICAgICAgICAgICAgICAgc3RvY2tUcmFkZXJEYXRhLnN0b2NrRm9yZWNhc3RzW3N5bWJvbF0gPSBbbnMuc3RvY2suZ2V0Rm9yZWNhc3Qoc3ltYm9sKV07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGxvZ0ZpbGVuYW1lID0gYCR7U1RPQ0tfSElTVE9SWV9MT0dTX1BSRUZJWH0ke0RhdGUubm93KCl9LnR4dGA7XG4gICAgICAgICAgICByb3RhdGVMb2cgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBDaGVjayBpZiBzdG9jayBwcmljZSBjaGFuZ2VkXG4gICAgICAgIGNvbnN0IGlzUHJpY2VDaGFuZ2VkID0gc3RvY2tTeW1ib2xzLnNvbWUoc3ltYm9sID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHJlY29yZHMgPSBzdG9ja1RyYWRlckRhdGEuc3RvY2tQcmljZXNbc3ltYm9sXTtcbiAgICAgICAgICAgIHJldHVybiByZWNvcmRzW3JlY29yZHMubGVuZ3RoIC0gMV0gIT09IG5zLnN0b2NrLmdldFByaWNlKHN5bWJvbCk7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoIWlzUHJpY2VDaGFuZ2VkKSB7XG4gICAgICAgICAgICBhd2FpdCBucy5zbGVlcCgyMDAwKTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIC8vIFJlY29yZCBuZXcgc3RvY2sgcHJpY2VcbiAgICAgICAgc3RvY2tTeW1ib2xzLmZvckVhY2goc3ltYm9sID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHJlY29yZHMgPSBzdG9ja1RyYWRlckRhdGEuc3RvY2tQcmljZXNbc3ltYm9sXTtcbiAgICAgICAgICAgIHJlY29yZHMucHVzaChucy5zdG9jay5nZXRQcmljZShzeW1ib2wpKTtcbiAgICAgICAgICAgIHN0b2NrVHJhZGVyRGF0YS5zdG9ja0ZvcmVjYXN0c1tzeW1ib2xdLnB1c2gobnMuc3RvY2suZ2V0Rm9yZWNhc3Qoc3ltYm9sKSk7XG4gICAgICAgICAgICBpZiAocmVjb3Jkcy5sZW5ndGggPT09IE1BWF9TVE9DS19ISVNUT1JZX1JFQ09SRCkge1xuICAgICAgICAgICAgICAgIHJvdGF0ZUxvZyA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBucy53cml0ZShsb2dGaWxlbmFtZSwgSlNPTi5zdHJpbmdpZnkoc3RvY2tUcmFkZXJEYXRhKSwgXCJ3XCIpO1xuICAgICAgICBhd2FpdCBucy5zbGVlcCgyMDAwKTtcbiAgICB9XG59XG4iXSwKICAibWFwcGluZ3MiOiAiQUFDQSxTQUFRLDBCQUEwQixpQ0FBZ0M7QUFDbEUsU0FBUSwwQkFBeUI7QUFVakMsSUFBSTtBQUVKLGVBQXNCLEtBQUssSUFBdUI7QUFDOUMsUUFBTSxJQUFJLG1CQUFtQixFQUFFO0FBQy9CLE1BQUksaUNBQWlDO0FBRXJDLEtBQUcsV0FBVyxLQUFLO0FBQ25CLEtBQUcsS0FBSztBQUVSLFFBQU0sZUFBZSxHQUFHLE1BQU0sV0FBVztBQUN6QyxRQUFNLGtCQUFtQztBQUFBLElBQ3JDLGFBQWEsQ0FBQztBQUFBLElBQ2QsZ0JBQWdCLENBQUM7QUFBQSxFQUNyQjtBQUNBLE1BQUksWUFBWTtBQUNoQixNQUFJLGNBQWM7QUFDbEIsU0FBTyxNQUFNO0FBRVQsUUFBSSxHQUFHLEdBQUcsUUFBUSx5QkFBeUIsRUFBRSxVQUFVLElBQUk7QUFDdkQ7QUFBQSxJQUNKO0FBRUEsUUFBSSxXQUFXO0FBRVgsbUJBQWEsUUFBUSxZQUFVO0FBQzNCLHdCQUFnQixZQUFZLE1BQU0sSUFBSSxDQUFDLEdBQUcsTUFBTSxTQUFTLE1BQU0sQ0FBQztBQUNoRSx3QkFBZ0IsZUFBZSxNQUFNLElBQUksQ0FBQyxHQUFHLE1BQU0sWUFBWSxNQUFNLENBQUM7QUFBQSxNQUMxRSxDQUFDO0FBQ0Qsb0JBQWMsR0FBRyx5QkFBeUIsR0FBRyxLQUFLLElBQUksQ0FBQztBQUN2RCxrQkFBWTtBQUFBLElBQ2hCO0FBRUEsVUFBTSxpQkFBaUIsYUFBYSxLQUFLLFlBQVU7QUFDL0MsWUFBTSxVQUFVLGdCQUFnQixZQUFZLE1BQU07QUFDbEQsYUFBTyxRQUFRLFFBQVEsU0FBUyxDQUFDLE1BQU0sR0FBRyxNQUFNLFNBQVMsTUFBTTtBQUFBLElBQ25FLENBQUM7QUFDRCxRQUFJLENBQUMsZ0JBQWdCO0FBQ2pCLFlBQU0sR0FBRyxNQUFNLEdBQUk7QUFDbkI7QUFBQSxJQUNKO0FBRUEsaUJBQWEsUUFBUSxZQUFVO0FBQzNCLFlBQU0sVUFBVSxnQkFBZ0IsWUFBWSxNQUFNO0FBQ2xELGNBQVEsS0FBSyxHQUFHLE1BQU0sU0FBUyxNQUFNLENBQUM7QUFDdEMsc0JBQWdCLGVBQWUsTUFBTSxFQUFFLEtBQUssR0FBRyxNQUFNLFlBQVksTUFBTSxDQUFDO0FBQ3hFLFVBQUksUUFBUSxXQUFXLDBCQUEwQjtBQUM3QyxvQkFBWTtBQUFBLE1BQ2hCO0FBQUEsSUFDSixDQUFDO0FBQ0QsT0FBRyxNQUFNLGFBQWEsS0FBSyxVQUFVLGVBQWUsR0FBRyxHQUFHO0FBQzFELFVBQU0sR0FBRyxNQUFNLEdBQUk7QUFBQSxFQUN2QjtBQUNKOyIsCiAgIm5hbWVzIjogW10KfQo=
